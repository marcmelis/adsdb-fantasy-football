#!/usr/bin/env python
# coding: utf-8

# In[19]:


# packages
import pandas as pd
import duckdb 
import math


# In[50]:


trusted_zone_db = '../data/trusted_zone/trusted_zone.db'
exploitation_zone_db = '../data/exploitation_zone/exploitation_zone.db'


# In[5]:


def get_tables(conn):
    tables_lists = conn.sql("SHOW TABLES").fetchall()
    return [t[0] for t in tables_lists]

def table_exists(table_name, conn):
    return table_name in get_tables(conn)

def get_table_df(table_name, conn):
    return conn.sql(f"SELECT * FROM \"{table_name}\";").df()

def drop_table(table_name, conn):
    if table_exists(table_name, conn):
        conn.sql(f"DROP TABLE \"{table_name}\"")
    
def create_table(table_name, df, conn, replace=True):
    if replace & table_exists(table_name, conn): 
        drop_table(table_name, conn)
    conn.sql(f"CREATE TABLE \"{table_name}\" AS SELECT * FROM df")

def append_table(table_name, df, conn):
    conn.sql(f"INSERT INTO \"{table_name}\" SELECT * FROM df")


# ## Matching each football match to the closer weather
# First we will link each team (with its stadium) to a weather stadium by choosing the closest one.

# In[25]:


conn = duckdb.connect(trusted_zone_db)
stadiums_df = get_table_df('team_stadium_location',conn)
wstations_df = get_table_df('weather_station_locations',conn)

conn.close()


# In[34]:


stadiums_df.head()


# In[33]:


wstations_df.head()


# In[44]:


def euclidean_distance(lat1, lon1, lat2, lon2):
    # Assuming the Britain can be approximated as a flat plane, calculate the distance using Pythagoras' theorem
    lat_diff = lat2 - lat1
    lon_diff = lon2 - lon1
    distance = math.sqrt(lat_diff**2 + lon_diff**2)

    return distance

closest_stations = []

# Loop through each team
for i, team_row in stadiums_df.iterrows():
    min_distance = float('inf')
    closest_station = None

    # Loop through each weather station
    for j, weather_row in wstations_df.iterrows():        
        distance = euclidean_distance(team_row['LAT'], team_row['LON'], weather_row['LAT'], weather_row['LON'])
        if distance < min_distance:
            min_distance = distance
            closest_station = weather_row['SITE']
        
    closest_stations.append(closest_station)
    
stadiums_df['closest_weather_station'] = closest_stations

team_station_df = stadiums_df[['team_name', 'closest_weather_station']]
team_station_df


# ### Plot of the weather stations and stadiums

# In[30]:


import matplotlib.pyplot as plt

fig, ax = plt.subplots()
ax.scatter(stadiums_df['LON'], stadiums_df['LAT'], c='blue', label='Stadiums', zorder=5)


for i, txt in enumerate(stadiums_df['team_name']):
    ax.annotate(txt, (stadiums_df['LON'].iloc[i], stadiums_df['LAT'].iloc[i]))

ax.scatter(wstations_df['LON'], wstations_df['LAT'], c='red', label='Weather Stations', zorder=5)

for i, txt in enumerate(wstations_df['SITE']):
    ax.annotate(txt, (wstations_df['LON'].iloc[i], wstations_df['LAT'].iloc[i]))

ax.set_xlabel("Longitude")
ax.set_ylabel("Latitude")
ax.set_title("Stadiums and Weather Stations")

ax.legend()
plt.show()


# ## Now matching each weather to each match
# 
# Now knowing which weather station is closer to which team we apply to every football match the weather of that day of its closest station. 

# In[37]:


conn = duckdb.connect(trusted_zone_db)
met_df = get_table_df('Metoffice', conn)
football_matches_df = get_table_df('football-data', conn)
conn.close()


# In[38]:


met_df.head()


# In[39]:


football_matches_df.head()


# In[40]:


football_matches_stations_df = football_matches_df.merge(team_station_df, 
                                               left_on='HomeTeam', 
                                               right_on='team_name', 
                                               how='left')


# In[43]:


football_matches_stations_df[['HomeTeam', 'closest_weather_station']]


# In[48]:


final_football_df = football_matches_stations_df.merge(met_df, 
                                           left_on=['Date', 'closest_weather_station'], 
                                           right_on=['Date', 'Station_name'],
                                            how='left')
# Drop the repeated columns
final_football_df = final_football_df.drop('team_name', axis=1)
final_football_df = final_football_df.drop('closest_weather_station', axis=1)
final_football_df = final_football_df.drop('Station_no', axis=1)
final_football_df = final_football_df.drop('Station_name', axis=1)


# In[49]:


final_football_df.head()


# In[52]:


conn = duckdb.connect(trusted_zone_db)
players_info_df = get_table_df('cleaned_merged_seasons', conn)
conn.close()


# In[53]:


conn = duckdb.connect(exploitation_zone_db)
create_table('football_matches', final_football_df, conn)
create_table('players', players_info_df, conn)
conn.close()


# In[54]:


conn = duckdb.connect(exploitation_zone_db)
print(get_tables(conn))
conn.close()


# In[ ]:




